# https://github.com/deplives/OpenWrt-CI

name: OpenWrt Compile Manually

on:
  workflow_dispatch:
    inputs:
      kernel:
        description: "kernel"
        required: true
        default: "default"

env:
  REPO: https://github.com/deplives/lede.git
  BRANCH: master
  CONFIG: x86.stable.config
  FIRST_SH: first.sh
  SECOND_SH: second.sh
  THIRD_SH: third.sh
  PATCHES_SH: patches.sh
  KERNEL: "${{ github.event.inputs.kernel }}"
  TIMEZONE: Asia/Shanghai

jobs:
  Compile:
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@main
        with:
          ref: main
          fetch-depth: 0

      - name: Space cleanup
        if: success() && !cancelled()
        run: |
          sudo -E apt-get -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* android*
          sudo rm -rf /etc/apt/sources.list.d /usr/share/dotnet /usr/local/lib/android /etc/mysql /etc/php /opt/ghc
          sudo -E apt-get -y autoremove --purge
          sudo -E apt-get clean
          docker rmi $(docker images -q)
          df -hT $PWD

      - name: Install dependencies
        env:
          DEBIAN_FRONTEND: noninteractive
        if: success() && !cancelled()
        run: |
          sudo timedatectl set-timezone "$TIMEZONE"
          sudo -E apt-get update
          sudo -E apt-get -y install $(curl -fsSL https://raw.githubusercontent.com/deplives/OpenWrt-Dependency/master/ubuntu-2004)
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: Clone source code
        working-directory: /workdir
        if: success() && !cancelled()
        run: |
          git clone $REPO -b $BRANCH openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          cd openwrt
          echo "COMMITSHA=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Cache
        uses: deplives/cacheopenwrt@main
        if: success() && !cancelled()
        with:
          ccache: true
          prefix: ${{ github.workspace }}/openwrt

      - name: Run first.sh
        if: success() && !cancelled()
        run: |
          chmod +x $FIRST_SH
          cd openwrt
          $GITHUB_WORKSPACE/$FIRST_SH

      - name: Update feeds
        if: success() && !cancelled()
        run: cd openwrt && ./scripts/feeds update -a

      - name: Run patches.sh
        if: success() && !cancelled()
        run: |
          chmod +x $PATCHES_SH
          $GITHUB_WORKSPACE/$PATCHES_SH

      - name: Run second.sh
        if: success() && !cancelled()
        run: |
          chmod +x $SECOND_SH
          cd openwrt
          $GITHUB_WORKSPACE/$SECOND_SH ${{ env.COMMITSHA }}

      - name: Install feeds
        if: success() && !cancelled()
        run: cd openwrt && ./scripts/feeds install -a

      - name: Run third.sh
        if: success() && !cancelled()
        run: |
          chmod +x $THIRD_SH
          cd openwrt
          $GITHUB_WORKSPACE/$THIRD_SH

      - name: Restore configuration
        if: success() && !cancelled()
        run: |
          [ -e files ] && mv files openwrt/files
          HTTPCODE=$(curl -s -w "%{http_code}" "${{ secrets.REMOTE_CONFIG_URL }}/$CONFIG" -o openwrt/.config)
          if [ $HTTPCODE != 200 ]; then
            echo 'Get remote config failed!'
            [ -e $CONFIG ] && mv $CONFIG openwrt/.config
          fi

      - name: Switch kernel
        if: success() && !cancelled()
        run: |
          cd openwrt
          if [ ${{ env.KERNEL }} != 'default' ]; then
            CURRENT_KERNEL_PATCHVER=$(cat target/linux/x86/Makefile | grep KERNEL_PATCHVER | awk -F ':=' '{print $2}')
            CURRNET_KERNEL_TESTING_PATCHVER=$(cat target/linux/x86/Makefile | grep KERNEL_TESTING_PATCHVER | awk -F ':=' '{print $2}')
            CONFIG_KERNEL_PATCHVER=$(echo "${{ env.KERNEL }}" | sed 's/\./_/g')
            sed -i "s/KERNEL_PATCHVER:=$CURRENT_KERNEL_PATCHVER/KERNEL_PATCHVER:=${{ env.KERNEL }}/g" target/linux/x86/Makefile
            sed -i "s/KERNEL_TESTING_PATCHVER:=$CURRNET_KERNEL_TESTING_PATCHVER/KERNEL_TESTING_PATCHVER:=${{ env.KERNEL }}/g" target/linux/x86/Makefile
            sed -i "s/CONFIG_LINUX.*/CONFIG_LINUX_${CONFIG_KERNEL_PATCHVER}=y/g" .config
          fi
          KERNEL_PATCHVER=$(cat target/linux/x86/Makefile | grep KERNEL_PATCHVER | awk -F ':=' '{print $2}')
          KERNEL_VERSION=$KERNEL_PATCHVER$(cat include/kernel-"$KERNEL_PATCHVER" | grep LINUX_VERSION | awk -F '= ' '{print $2}')
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV

      - name: Download package
        if: success() && !cancelled()
        run: |
          cd openwrt
          make defconfig
          make download -j8
          find dl -size -1024c -exec rm -f {} \;

      - name: Compile firmware
        if: success() && !cancelled()
        run: |
          echo "Start compile ${{ env.KERNEL_VERSION }} ${{ env.COMMITSHA }}"
          curl -s "https://api.telegram.org/${{ secrets.TELEGRAM_TOKEN }}/sendMessage" --header "Content-Type: application/json" --data-raw "{\"chat_id\": \"${{ secrets.TELEGRAM_TO }}\",\"text\": \"OpenWrt 手动触发编译(stable)\n状态: 正在进行\nKernel Version: ${{ env.KERNEL_VERSION }}\nCommit SHA: ${{ env.COMMITSHA }}\"}"
          cd openwrt
          make -j$(nproc) || make -j1 V=sc

      - name: Organize files
        if: success() && !cancelled()
        run: |
          cd openwrt/bin/targets/*/*
          shopt -s extglob
          rm -rf !(*.img|*.vmdk)
          shopt -u extglob
          sha256sum * > sha256sum.txt
          cp /workdir/openwrt/.config $CONFIG
          echo "FIRMWARE=$PWD" >> $GITHUB_ENV

      - name: Generate release tag
        id: tag
        if: success() && !cancelled()
        run: |
          echo "::set-output name=release_tag::OpenWrt-$(date +'%Y%m%d')"
          touch release.txt
          echo "Kernel Version: ${{ env.KERNEL_VERSION }}" >> release.txt
          echo "Commit SHA: ${{ env.COMMITSHA }}" >> release.txt

      - name: Release
        uses: softprops/action-gh-release@v1
        if: success() && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          body_path: release.txt
          files: ${{ env.FIRMWARE }}/*

      - name: Compile has succeeded
        if: success() && !cancelled()
        run: |
          curl -s "https://api.telegram.org/${{ secrets.TELEGRAM_TOKEN }}/sendMessage" --header "Content-Type: application/json" --data-raw "{\"chat_id\": \"${{ secrets.TELEGRAM_TO }}\",\"text\": \"OpenWrt 手动触发编译(stable)\n状态: 成功\nKernel Version: ${{ env.KERNEL_VERSION }}\nCommit SHA: ${{ env.COMMITSHA }}\"}"

      - name: Compile has failed
        if: failure()
        run: |
          curl -s "https://api.telegram.org/${{ secrets.TELEGRAM_TOKEN }}/sendMessage" --header "Content-Type: application/json" --data-raw "{\"chat_id\": \"${{ secrets.TELEGRAM_TO }}\",\"text\": \"OpenWrt 手动触发编译(stable)\n状态: 失败\nKernel Version: ${{ env.KERNEL_VERSION }}\nCommit SHA: ${{ env.COMMITSHA }}\"}"

      - name: Remove workflow runs
        uses: Mattraks/delete-workflow-runs@main
        with:
          retain_days: 1
          keep_minimum_runs: 1
